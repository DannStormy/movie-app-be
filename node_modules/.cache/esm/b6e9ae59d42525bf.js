let Router,fetchMovies,fetchMovieByID,updateMovieRating,addNewMovie,deleteMovie,movieReview,AccessControlMiddleware,AuthMiddleware,schema;_d42‍.x([["default",()=>_d42‍.o]]);_d42‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_d42‍.w("../controllers/movie.controller",[["fetchMovies",["fetchMovies"],function(v){fetchMovies=v}],["fetchMovieByID",["fetchMovieByID"],function(v){fetchMovieByID=v}],["updateMovieRating",["updateMovieRating"],function(v){updateMovieRating=v}],["addNewMovie",["addNewMovie"],function(v){addNewMovie=v}],["deleteMovie",["deleteMovie"],function(v){deleteMovie=v}],["movieReview",["movieReview"],function(v){movieReview=v}]]);_d42‍.w("../middlewares/accessControl",[["default",["AccessControlMiddleware"],function(v){AccessControlMiddleware=v}]]);_d42‍.w("../middlewares/auth.middleware",[["default",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_d42‍.w("../validations/schema.js",[["default",["schema"],function(v){schema=v}]]);












const { isBiUser, isUser, isActive } = AccessControlMiddleware;
const { validate, authenticate } = AuthMiddleware;
const { addMovieSchema, reviewMovieSchema } = schema;

const router = Router();

router.get("/", fetchMovies);
router.get("/:id", fetchMovieByID);
router.put("/rating", [authenticate, isActive], updateMovieRating);
router.post(
  "/add-movie",
  validate(addMovieSchema),
  [authenticate, isBiUser],
  addNewMovie
);
router.post("/review-movie", validate(reviewMovieSchema), [authenticate, isUser], revi);
router.delete("/delete/:id", [authenticate, isBiUser], deleteMovie);

_d42‍.d(router);
