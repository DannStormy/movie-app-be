let Router,superControllers,AccessControlMiddleware,SuperMiddleware,AuthMiddleware,schema;_c2a‍.x([["default",()=>_c2a‍.o]]);_c2a‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_c2a‍.w("../controllers/super.controller.js",[["*",null,function(v){superControllers=v}]]);_c2a‍.w("../middlewares/accessControl",[["default",["AccessControlMiddleware"],function(v){AccessControlMiddleware=v}]]);_c2a‍.w("../middlewares/super.middleware",[["default",["SuperMiddleware"],function(v){SuperMiddleware=v}]]);_c2a‍.w("../middlewares/auth.middleware",[["default",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_c2a‍.w("../validations/schema.js",[["default",["schema"],function(v){schema=v}]]);






const router = Router();

const { isSuper } = AccessControlMiddleware;
const { loginSchema, createAdminSchema, changeStatusSchema } = schema;
const { checkDetails, checkAdminExists } = SuperMiddleware;
const { authenticate, validate } = AuthMiddleware;

router.post(
  "/login",
  validate(loginSchema),
  checkDetails,
  superControllers.superLogin
);
router.use(isSuper);
router.get("/users", authenticate, superControllers.fetchUsers);
router.post(
  "/create-admin",
  validate(createAdminSchema),
  checkAdminExists,
  authenticate,
  superControllers.createNewAdmin
);
router.put(
  "/setuserstate",
  validate(changeStatusSchema),
  authenticate,
  superControllers.changeUserStatus
);
router.put(
  "/setadminstate",
  validate(changeStatusSchema),
  authenticate,
  superControllers.changeAdminStatus
);

_c2a‍.d(router);
