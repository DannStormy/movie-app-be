let Router,movieControllers,AccessControlMiddleware,AuthMiddleware,schema;_b85‍.x([["default",()=>_b85‍.o]]);_b85‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_b85‍.w("../controllers/movie.controller",[["*",null,function(v){movieControllers=v}]]);_b85‍.w("../middlewares/accessControl",[["default",["AccessControlMiddleware"],function(v){AccessControlMiddleware=v}]]);_b85‍.w("../middlewares/auth.middleware",[["default",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_b85‍.w("../validations/schema.js",[["default",["schema"],function(v){schema=v}]]);





const { isBiUser, isUser, isSuper } = AccessControlMiddleware;
const { validate, authenticate } = AuthMiddleware;

const router = Router();

router.get("/reviews", movieControllers.fetchAllReviews);
router.get("/reviews/:movieId", movieControllers.fetchReviewsById);
router.get("/", movieControllers.fetchMovies);
router.get("/:movieId", movieControllers.fetchMovieByID);

router.use(authenticate);
router.put(
  "/title/:movieId",
  validate(schema.editTitleSchema),
  isSuper,
  movieControllers.titleEdit
);
router.post(
  "/reviews",
  validate(schema.reviewMovieSchema),
  isUser,
  movieControllers.movieReview
);
router.post(
  "/rating",
  validate(schema.ratingSchema),
  isUser,
  movieControllers.movieRating
);
router.use(isBiUser);
router.post("/", validate(schema.addMovieSchema), movieControllers.addNewMovie);
router.put(
  "/rating/:movieId",
  validate(schema.editRatingSchema),
  movieControllers.ratingEdit
);
router.put(
  "/reviews/:movieId",
  validate(schema.editReviewSchema),
  movieControllers.reviewEdit
);
router.delete("/:movieId", movieControllers.deleteMovie);

_b85‍.d(router);
