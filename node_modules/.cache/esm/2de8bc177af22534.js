let db,Helper,user_queries;_7af‍.x([["default",()=>UserService]]);_7af‍.w("../config/config",[["default",["db"],function(v){db=v}]]);_7af‍.w("../utils/helpers/helpers",[["default",["Helper"],function(v){Helper=v}]]);_7af‍.w("../queries/user.queries",[["default",["user_queries"],function(v){user_queries=v}]]);



const { registerUser, findUserByEmail, addClientStatus, checkClientStatus } =
  user_queries;

               class UserService {
  /**
   * register new user
   * @memberof UserService
   */
  static async addUser(data) {
    let { firstName, lastName, email, password } = data;
    password = await Helper.generatePasswordHash(password);
    return db.one(registerUser, [firstName, lastName, email, password]);
  }

  /**
   * register user status
   * @memberof UserService
   */
  static async addStatus(id, status = true) {
    return db.none(addClientStatus, [id, status]);
  }

  /**
   * get user by email
   * @memberof UserService
   */
  static async getUserByEmail(email) {
    return db.oneOrNone(findUserByEmail, [email]);
  }

  /**
   * check client account status
   * @memberof UserService
   */
  static async fetchClientStatus(id) {
    return db.oneOrNone(checkClientStatus, [id]);
  }
}
