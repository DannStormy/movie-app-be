let Router,superLogin,fetchUsers,createNewAdmin,addNewMovie,AccessControlMiddleware,SuperMiddleware,UserMiddleware,schema;_5fa‍.x([["default",()=>_5fa‍.o]]);_5fa‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_5fa‍.w("../controllers/super.controller.js",[["superLogin",["superLogin"],function(v){superLogin=v}],["fetchUsers",["fetchUsers"],function(v){fetchUsers=v}],["createNewAdmin",["createNewAdmin"],function(v){createNewAdmin=v}],["addNewMovie",["addNewMovie"],function(v){addNewMovie=v}]]);_5fa‍.w("../middlewares/accessControl",[["default",["AccessControlMiddleware"],function(v){AccessControlMiddleware=v}]]);_5fa‍.w("../middlewares/super.middleware",[["default",["SuperMiddleware"],function(v){SuperMiddleware=v}]]);_5fa‍.w("../middlewares/user.js",[["default",["UserMiddleware"],function(v){UserMiddleware=v}]]);_5fa‍.w("../validations/schema.js",[["default",["schema"],function(v){schema=v}]]);












const router = Router();

const { isSuper } = AccessControlMiddleware;
const { loginSchema, createAdminSchema, addMovieSchema } = schema;
const { checkDetails, checkAdminExists } = SuperMiddleware;
const { authenticate, validate } = UserMiddleware;

router.get("/users", [authenticate, isSuper], fetchUsers);
router.post("/login", validate(loginSchema), checkDetails, superLogin);
router.post(
  "/create-admin",
  validate(createAdminSchema),
  checkAdminExists,
  [authenticate, isSuper],
  createNewAdmin
);
router.post(
  "/add-movie",
  validate(addMovieSchema),
  [authenticate, isSuper],
  addNewMovie
);

_5fa‍.d(router);
