let db,movieQueries,public_queries,Helper;_488‍.x([["default",()=>MovieService]]);_488‍.w("../config/config",[["default",["db"],function(v){db=v}]]);_488‍.w("../queries/movie.queries",[["default",["movieQueries","public_queries"],function(v){movieQueries=public_queries=v}]]);_488‍.w("../utils/helpers/helpers",[["default",["Helper"],function(v){Helper=v}]]);




const { fetchResourceByPage, calcPages } = Helper;
const {
  fetchAllMovies,
  searchMovieQuery,
  fetchMoviesCount,
  fetchMovieByID,
  rateMovie,
} = public_queries;

               class MovieService {
  /**
   * fetch all movies
   * @memberof MovieService
   */
  static async fetchAllMovies({ page = 1, limit = 10 }) {
    console.error("Na me");
    const [total, result] = await fetchResourceByPage({
      page,
      limit,
      getCount: fetchMoviesCount, //query to count all movies
      getResources: fetchAllMovies, //query to get all the movies
    });

    return {
      total: +total.count,
      currentPage: +page,
      totalPages: calcPages(total.count, limit),
      result,
    };
  }

  /**
   * fetch movies by name, genre, year
   * @memberof MovieService
   */
  static async fetchMovieByQuery({ page = 1, limit = 10, search }) {
    const { title, year, genre } = search;
    console.log("I ran");
    const [total, result] = await fetchResourceByPage({
      page,
      limit,
      getCount: fetchMoviesCount, //query to count all movies
      getResources: searchMovieQuery, //query to get all the movies
      params: [`%${title}%`, year, `%${genre}%`],
      countParams: [`%${title}%`, year, `%${genre}%`],
    });

    return {
      total: +total.count,
      currentPage: +page,
      totalPages: calcPages(total.count, limit),
      result,
    };
    // return db.manyOrNone(searchMovieQuery, [`%${title}%`, year, `%${genre}%`]);
  }

  static async getMovies({ page, limit, search }) {
    _488‍.g.console.log("search movies", search);
    return search
      ? MovieService.fetchMovieByQuery( page, limit, search )
      : MovieService.fetchAllMovies({ page, limit });
  }

  static async getMovieByID(params) {
    const { id } = params;
    return db.oneOrNone(fetchMovieByID, [id]);
  }

  static async rateMovie(data) {
    let { rating, id } = data;
    const movie = await db.oneOrNone(fetchMovieByID, [id]);
    movie.ratingscount++;
    rating = (Math.round(rating + movie.rating / movie.ratingscount) * 10) / 10;
    _488‍.g.console.log(rating);
    return db.none(rateMovie, [rating, movie.ratingscount, movie.id]);
  }
}
