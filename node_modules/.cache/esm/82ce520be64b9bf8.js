let MovieService;_e64‍.x([["fetchMovies",()=>fetchMovies],["fetchMovieByID",()=>fetchMovieByID],["updateMovieRating",()=>updateMovieRating],["addNewMovie",()=>addNewMovie],["deleteMovie",()=>deleteMovie]]);_e64‍.w("../services/movie.service",[["default",["MovieService"],function(v){MovieService=v}]]);

const { getMovies, getMovieByID, rateMovie, addMovie, removeMovie } =
  MovieService;

const fetchMovies = async (req, res) => {
  try {
    // const {title, genre, year} = req.query
    // if (title || genre || year) {
    //   console.log('Here', req.query)
    //   const movies = await movie(req.query);
    //   return res.status(200).json({
    //     message: `movies returned`,
    //     data: movies,
    //   });
    // }
    // const movies = await fetchAllMovies(req.query);
    // return res.status(200).json({
    //   message: "movies fetched",
    //   data: movies,
    // });
    _e64‍.g.console.log("All queries", req.query);
    const movies = await getMovies(req.query);
    return res.status(200).json({
      message: `movies returned`,
      data: movies,
    });
  } catch (error) {
    _e64‍.g.console.log(error); //will use logger instead (testing now)
    return error;
  }
};

const fetchMovieByID = async (req, res) => {
  try {
    const movie = await getMovieByID(req.params);
    return res.status(200).json({
      message: `movie with id:${req.params.id} fetched`,
      data: movie,
    });
  } catch (error) {
    _e64‍.g.console.log(error); //will use logger instead (testing now)
    return error;
  }
};

const updateMovieRating = async (req, res) => {
  console.log('Here')
  try {
    await rateMovie(req.body);
    return res.status(200).json({
      message: `movie rated`,
    });
  } catch (error) {
    _e64‍.g.console.log(error); //will use logger instead (testing now)
    return error;
  }
};

const addNewMovie = async (req, res) => {
  try {
    await addMovie(req.body);
    return res.status(200).json({
      message: "movie added",
      data: req.body,
    });
  } catch (error) {
    _e64‍.g.console.log(error);
    return error;
  }
};

const deleteMovie = async (req, res) => {
  console.log('yghrefgwkjhgerwlku')
  try {
    _e64‍.g.console.log('Params', req.params)
    const movie = await getMovieByID(req.params);
    if (!movie)
      return res
        .status(400)
        .json({ message: `Movie with id:${req.params.id} not found` });
    await removeMovie(req.params);
    return res.status(200).json({
      message: `movie with id: ${req.params.id} removed`,
    });
  } catch (error) {
    _e64‍.g.console.log(error);
    return error;
  }
};








