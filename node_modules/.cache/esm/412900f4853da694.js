let bcrypt,jwt;_853‍.x([["default",()=>Helper]]);_853‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_853‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);


               class Helper {
/**
   * validates an input based on a schema
   * @static
   * @param { Joi } schema - The validation schema.
   * @param { Object } object - The data to be validated
   * @memberof Helper
   * @returns { boolean }
   */
 static async validateInput(schema, object) {
  return schema.validateAsync(object);
}
/**
   * hash password
   * @static
   * @memberof Helper
   * @returns {string | number } - generate password hash.
   */
  static async generatePasswordHash(password) {
    const hash = await bcrypt.hashSync(password, 10);
    return hash
  }
/**
   * compare hash password
   * @static
   * @memberof Helper
   * @returns {Boolean}
   */
  static async comparePasswordHash(password, hash) {
    const result = await bcrypt.compare(password, hash);
    _853‍.g.console.log('Result', hash)
    return result;
  }
/**
   * generate user token
   * @static
   * @memberof Helper
   * @returns {String}
   */
  static generateJWT(data) {
    return jwt.sign(data,  process.env.JWT_SECRET_KEY, { expiresIn: '1h' })
        // {
        //     data: payload, // this should be user id
        // },
       
    // );
    // return sessionToken
  }



}