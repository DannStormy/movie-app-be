let UserService;_e5e‍.x([["default",()=>_e5e‍.o]]);_e5e‍.w("../services/user.service",[["default",["UserService"],function(v){UserService=v}]]);

const { fetchClientStatus } = UserService;
/**
 * A collection of middleware methods used for access control
 * of requests through protected routes.
 *
 * @class AccessControlMiddleware
 */
class AccessControlMiddleware {
  /**
   * client/admin/superadmin middleware guard.
   * @param { Object } req - The request from the endpoint.
   * @param { Object } res - The response returned by the method.
   * @param { function } next - Calls the next handle.
   * @returns { JSON | Null } - Returns error response if validation fails or Null if otherwise.
   * @memberof accessControl Middleware
   */
  static isTriUser(req, res, next) {
    const { role } = req.data;
    if (role !== "user" && role !== "admin" && role !== "super")
      return res.status(403).send({ message: "Access denied" });
    next();
  }

  /**
   * admin/superadmin middleware guard.
   * @param { Object } req - The request from the endpoint.
   * @param { Object } res - The response returned by the method.
   * @param { function } next - Calls the next handle.
   * @returns { JSON | Null } - Returns error response if validation fails or Null if otherwise.
   * @memberof accessControl Middleware
   */
  static isBiUser(req, res, next) {
    const { role } = req.data;
    if (role !== "admin" && role !== "super")
      return res.status(403).send({ message: "Access denied" });
    next();
  }

  /**
   * Admin middleware guard.
   * @param { Object } req - The request from the endpoint.
   * @param { Object } res - The response returned by the method.
   * @param { function } next - Calls the next handle.
   * @returns { JSON | Null } - Returns error response if validation fails or Null if otherwise.
   * @memberof accessControl Middleware
   */
  static isAdmin(req, res, next) {
    const { role } = req.data;
    if (role !== "admin")
      return res.status(403).send({ message: "Access denied" });
    next();
  }

  /**
   * Super Admin middleware guard.
   * @param { Object } req - The request from the endpoint.
   * @param { Object } res - The response returned by the method.
   * @param { function } next - Calls the next handle.
   * @returns { JSON | Null } - Returns error response if validation fails or Null if otherwise.
   * @memberof accessControl Middleware
   */
  static isSuper(req, res, next) {
    const { role } = req.data;
    if (role !== "super")
      return res.status(403).send({ message: "Access denied" });
    next();
  }

  /**
   * Accout active? middleware guard.
   * @param { Object } req - The request from the endpoint.
   * @param { Object } res - The response returned by the method.
   * @param { function } next - Calls the next handle.
   * @returns { JSON | Null } - Returns error response if validation fails or Null if otherwise.
   * @memberof accessControl Middleware
   */
  static async isActive(req, res, next) {
    const { userId, role } = req.data;
    _e5e‍.g.console.log(role)
    if (role === "user") {
      const { status } = await fetchClientStatus(userId);
      _e5e‍.g.console.log(status)
      if (!status)
        return res
          .status(403)
          .send({ message: "Account Deactivated, can't perform action" });
    }
    next();
  }
}

_e5e‍.d(AccessControlMiddleware);
