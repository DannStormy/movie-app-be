let Helper,UserService;_16b‍.x([["register",()=>register],["login",()=>login]]);_16b‍.w("../utils/helpers/helpers",[["default",["Helper"],function(v){Helper=v}]]);_16b‍.w("../services/user.service",[["default",["UserService"],function(v){UserService=v}]]);


const { addUser, addStatus } = UserService;
const { generateJWT } = Helper;

const register = async (req, res) => {
  try {
    const user = await addUser(req.body);
    await(addStatus(user.id))
    delete req.body.password;
    return res.status(200).json({
      message: "register successful",
      data: user
    });
  } catch (error) {
    _16b‍.g.console.log(error); //will use logger instead (testing now)
    return error;
  }
};

const login = async (req, res) => {
  try {
    const data = { userId: req.user.id, role: "user" };
    let token = await generateJWT(data);
    delete req.user.password
    return res.status(200).json({
      message: "login successful",
      data: { ...token, user: req.user },
    });
  } catch (error) {
    _16b‍.g.console.log(error);
    return error;
  }
};


